redux

flow of redux:

State->views->action->reducer->store


To view Products from state after calling api when loading viewproductcomponent at first
1. make necessary files and folders
  redux has action ,reducre and state files : make a folder actions and reducers inside src folder, while make store.js inside src 
  primarily we want to change and manipulate the view product component so action has only one file that targets products 
  inside actions 
  product.ac.js
  
  reducer folder:
    reducers are the controlling part for the states: necessary logic to update states are written inside reducers: 
    reducers must contain rootreducers 
    so rootreducer is index.js 
     and necessarily particular reducers for particular actions are made the seperate files 
     i.e. for manipulating products: product.red.js,for users: user.red.js and notifications: notifications.red.js 

  store:
    it  is the centralized state which is made inside src folder

2. workflow and import mechanism

 -> UI triggers action ->actions takes control to reducers -> reducers updates the state -> change in UI 
 -> all the mechanism i.e. rendering of UI is done by change in either states or props but here is change in props 

 1st thing:
    make a states: make necessary states that you need after fetching products as soon as you call API 

    you need is Arrray of products so initialize products:[]

    you need to create store and is imported redux 

    createstore takes three arguments:rootreducer,initialstate and middleware
    rootreducer must be imported and initialstate is the state that you made earlier and middleware is something that is asynchronous
    (helps to make it) coz the API call is asynchronous:
    import { createStore, applyMiddleware } from 'redux';

            import thunk from 'redux-thunk';
            import { rootReducer } from './reducers';
            const middlewares = [thunk]
            const initialState = {
                product: {
                    products: []
                },
            }

            export const store = createStore(rootReducer, initialState, applyMiddleware(...middlewares))


  2nd thing: go to viewcomponent file 
  you need to access data directly from store thus need to connect UI component with store 
  so import connect from react-redux at first 
  
  while doing connect
  you need to export the component by connecting 
  how?
  just initialize the state and dont default export :
            class ViewProductsComponent extends Component {
            }
   not 
        export default class ViewProductsComponent extends Component {
        }   
   now you named export the component:
        class ViewProductsComponent extends Component {
            }
export const Viewproducts=connect(mapStateToProps,mapDispatchToProps)(ViewProductsComponent)

connect takes three args 
first 2 args: 
: mapStateToProps-> it takes the data from state as a props : i.e access the products state's data 
                                mapDispatchToProps-> when the actions from UI component to change the states are triggered it takes those 
                                action to action and action takes to reducers and finally reducers to change the state: 
                                state data will consume by mapStateToProps as props and re-render the component
last arg: is state itself where the store is accessing directly


3. make action file:
  in product.ac.js 
  you are just going to fetch product by calling the api: API call is done in action file and you need to import this action file 
  each function to view product component 


                export const fetchProducts=params=>{
                    console.log("at action file",params)
                    return(dispatch)=>{
                        dispatch({
                            type:ProductActionTypes.SET_IS_LOADING,
                            payload:trues
                        })
                        httpClient.GET('/product')
                        .then((resp) => {
                            console.log(resp)
                            dispatch({
                                type: ProductActionTypes.PRODUCTS_RECEIVED,
                                payload: resp.data
                            })
                        })
                        .catch(err => {
                            errorHandler(err)
                        })
                        .finally(() => {
                            dispatch({
                                type: ProductActionTypes.SET_IS_LOADING,
                                payload: false
                            })
                        })
                    }
                }
    explanation and further steps:
    the function is made and imported in viewproductcomponent: it will take props as argument and returns a function with dispatch
    as argument:
                     dispatch({
                            type:ProductActionTypes.SET_IS_LOADING,
                            payload:trues
                        })
    dispatch triggers reducers to set the state as in reducers setting of state is need to be maintained
    what it does in UI:? till now api hasn/t hit so you need to set loader or give loading signal to Ui component and to set 
    loading flag SER_IS_LOAGING is made true : payload true is for that signal

    now the http client is called and the data obtained are send to receiver to update the state:
    PRODUCTS_RECEIVED is the flag and payload is resp.data : else the same thing

    finally when api call has finished you need to set loader false and that is what dispatch inside finally does 

    where is  ProductActionTypes?

    it is an object that is made in action file to give signal to reducers as cases: are made in reducers and according to these
    types different actions are performed 

                        export const ProductActionTypes = {
                        SET_IS_LOADING: 'SET_IS_LOADING',
                        PRODUCTS_RECEIVED: 'PRODUCTS_RECEIVED',
                        PRODUCT_REMOVED:'PRODUCT_REMOVED'
                    }

    it is exported because needs to be imported in reducers:


      how the action triggers when viewproducts component loads?

    wnever you make the mapDispatchToProps automatically in this.props the functions that you make inside the function will stay

    in viewproductcomponent:

                        const mapDispatchToProps=dispatch=>{
                        // console.log("at mapDispatchToProps")

                        return{
                            fetch:(params)=>dispatch(fetchProducts(params)),
                        }
                    }
                in this.props: fetch()=> is already redistered as soon as you use connect 

    and you call this function from props : in component did mount of viewproductcomponent
                    componentDidMount() {
                        console.log("check props in view products component",this.props)
                        this.props.fetch()
                    }    

  upto here API call is successfully done and data are successfully sent to the reducers:

4. Inside Reducers:
    index.js -> it is rootreducers that you are importing in store.js 
     there could be many reducers for many datas: 
     eg. in Product->productreducer
        in user->userreducers etc.
     register each reducers in root register as

     you need to import combinereducers as you are combining multiple reducers here once 

                        import { combineReducers } from "redux";
                    import { ProductReducer } from "./product.red";

                    export const rootReducer=combineReducers({
                        product:ProductReducer, 
                        // user:userReducer
                    })  


    product.red is mentioned but the  logic is: as this roodreducers transfer control to respective reducers 

                import { ProductActionTypes } from "../actions/product.ac"
                    export const ProductReducer = (state, action) => {
                        console.log('at reducer>>>>', action)
                        // console.log("product reducer state is",state)
                        switch (action.type) {
                            case ProductActionTypes.SET_IS_LOADING:
                                return {
                                    ...state,
                                    isLoading: action.payload
                                }
                            case ProductActionTypes.PRODUCTS_RECEIVED:
                                return {
                                    ...state,
                                    products: action.payload
                                }
                        }
                    }
    this updates the stores state :
    it takes states and action as argument: action has the object sent by dispatch from action file 
    states has default state: products:[] and isloading:false 
      state will be taken as in the form of object destructing:
      from state :
                product: {
                    isLoading: false,
                    products: []
                }
                this whole object is passed but 
                in rootreducers 
                export const rootReducer=combineReducers({
                        product:ProductReducer,  //this product and the product object key i.e. states passed from state needs to be matched
                        // user:userReducer
                    })  
        and inside productreducer:    
                      isLoading: false,
                    products: []  
                    only these content is passed from rootreducers as object 
                    so     
                              return {
                                    ...state,
                                    products: action.payload
                                }  
                    this is possible 

 upto here by fetching content and updating the state is done

 5. showing in UI 


 UI has mapStateToProps which takes the data from store as an props 
            const mapStateToProps=rootstore=>{
                // console.log("at mapStateToProps")
                return{
                    a:'abcd',
                    products:rootstore.product.products,
                    isloading:rootstore.product.isLoading,
                    // products:rootstore
                }
            }
 mapstatetoprops takes roostore as argument and returns the object by taking data from rootstore after updating state in store

 this is done at last 

 now you need to show all the products to UI and not from state but from props :
 so
 in render()
    const content = this.props.isloading ?
            <p>loading......</p>
            :show the content 

where there was state at past but now it is props not state as data are in props not in state 


whole total redux cycle has been completed 


other process is same for removing products and all 

things worked in this file:
 fetching products 
 removing products 

 cycle is same calling api is different as you did before

                                

   

